pipeline {
    agent any

    environment {
        winhost = "192.168.2.10"
        adadmuser = ""
        adadmpass = ""
        changelog = "Added host to domain"
        branch = "CSR1000V-Development"
        // Define the version number
        version = "V1.0.0"
        fallback_version = "V1.0.0"
        // Define the GitHub repository URL
        githubRepoURL = "https://github.com/ZeroSighs/Group_45_MP.git"
        // Define the file path within the repository
        pbfilePath = "${WORKSPACE}/WinHost_Playbook/${version}/WinHost_Playbook.yml"
        htfilePath = "${WORKSPACE}/WinHost_Playbook/hosts"
        githubCredentialsId = 'gitlol'
        builderror = false
    }
    stages {
        
        stage('Check if host is online') { //This is a basic ping test - returns exit code 0 if ping is successful
             steps {
                script {
                def pingExitCode = sh(script: "ping -c 4 ${winhost}", returnStatus: true)
            
                if (pingExitCode != 0) {
                    currentBuild.result = "FAILURE"
                    error("Ping test to host failed. Check if the host you are adding to the domain is online.")
                    }
                }
            }
        } 
        
        stage('Authenticate with Vault') {
            steps {
                script {
                        // retrieves hashicorp vault credentials (both the domain user, local admin and domain admin credentials are stored here)
                        withVault(configuration: [disableChildPoliciesOverride: false, engineVersion: 1, timeout: 60, vaultCredentialId: 'vault-jenkins', vaultUrl: 'http://127.0.0.1:8200'], vaultSecrets: [[path: 'secret/ad_credentials', secretValues: [[envVar: 'adadmuser', vaultKey: 'jadmin_username'], [envVar: 'adadmpass', vaultKey: 'jadmin_password'], [envVar: 'userpass', vaultKey: 'luser_password'], [envVar: 'useruser', vaultKey: 'luser_username']]]]) 
                            {
                            adadmuser = env.adadmuser
                            adadmpass = env.adadmpass
                            useruser = env.useruser
                            userpass = env.userpass
                            }
                    }
                }
        }
        stage('Checkout from GitHub') {
            steps {
                script {
                    git branch: "${branch}",
                    credentialsId: "${githubCredentialsId}",
                    url: "${githubRepoURL}"
                    dir("WinHost_Playbook/${version}") {
                        sh "cat WinHost_Playbook.yml"  // Display the content of the playbook file
                        sh "cp WinHost_Playbook.yml ${WORKSPACE}/WinHost_Playbook.yml"
                    }
                    sh "cat WinHost_Playbook/hosts"
                    sh "cp WinHost_Playbook/hosts ${WORKSPACE}/hosts" // Display the content of the hosts file
                }
            }
        }  
        stage('Run Ansible Playbook') {
            steps { //adadmuser - domain admin for authenticating with domain controller, useruser - local admin for remoting in
                script {
                    ansiblePlaybook([extraVars: [adadmuser: "${adadmuser}", adadmpass: "${adadmpass}", ansible_user: "${useruser}", ansible_password: "${userpass}"], disableHostKeyChecking: true, installation: 'Ansible', inventory: 'hosts', playbook: 'WinHost_Playbook.yml', vaultTmpPath: ''])
                }
            }
        } 
        stage('Success Notification') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                script {
                    // The API Link is generated when you create a bot. Keep this link safe as anyone can use the API Key (with the link) to send messages using the bot
                    msg = "Device ${winhost} succesfully added to domain using playbook ${pbfilePath}"
                    // format this as json and curl from the VM to send a message through the telegram
                    sh "curl -X POST -H 'Content-Type: application/json' -d '{\"chat_id\": \"6680816225\", \"text\": \"$msg\", \"disable_notification\": true}' https://api.telegram.org/bot6964667296:AAF8Bv8XibWEPeQ4CQCL5htOfEVJTrffhHs/sendMessage"
                }
                    
            }
        }
    }
}   

        
